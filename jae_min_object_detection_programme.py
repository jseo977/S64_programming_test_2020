# -*- coding: utf-8 -*-
"""Jae Min object detection programme

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tQx9FFKMTk2w3eh2LhBQ9PZI0nUbtfKB

# **Jae Min Simple Object Detection Programme**


Following the steps in this Colab will allow you to *upload supported image files* and ***output a .txt file*** that records the instances of objects recorded by the implemented YOLO object identification, and an ***output image file*** that detects where the objects were detected (the format of the output image file should be the same as that of the input image file).

I have tried to make the Colab as easy to follow as possible. Further files/extras you may be interested in are here as follows:

 - I have made a video showing the steps to follow, using the example images provided.
 You can find the link to the video [here](https://drive.google.com/file/d/1NsgKm-vByvzL59UerT8ebvZIC5Hk3knT/view?usp=sharing).
 - I have uploaded the output files onto Google Drive, which can be accessed [here](https://drive.google.com/drive/folders/1jinCyrW8x5EF_w2zz2Dr6Stc766pDrec?usp=sharing).
 - The files I used/wrote were uploaded onto git and can be accessed [here](https://bitbucket.org/jmseo8441/jmss64_sa/).

Note that the files I have linked above should be available on the left files panel after you run the code yourself.

# Imports + File Downloads

Run the cell below to import all of the necessary libraries and modules needed to run this Notebook.
"""

# Import files module for file upload.
# Note that other necessary modules (eg. numpy, cv2) are imported within
# their respective scripts.
from google.colab import files
import shutil
print('Libraries and modules successfully imported')

"""Clone important pre-trained model data and model configurations from Bitbucket.
Note that this may take a short moment.
"""

# Load necessary models from git (via Bitbucket)
!git clone https://jmseo8441@bitbucket.org/jmseo8441/mlobjectdetectionprogramme.git
print('Repo successfully cloned')
print('Refresh left files panel to see cloned files named \'jmss64_sa\'')

"""Run the cell below to define the functions needed for this notebook."""

from mlobjectdetectionprogramme import jmss64_git as s64_funcs
print('Successfully imported custom modules')

"""# Image Uploads

Upload the images that you would like to be processed. Note that this Google upload features allows you to upload multiple images, but not a folder. Repeat if necessary.
"""

uploaded = files.upload()
print('Files uploaded successfully')
print('Refresh left files panel to see the uploaded files')

"""Store all image files in a list.
Collects all image formats that are supported by OpenCV (
 .jpg, jpeg, .jp2, .png, .bmp, .webp, .pbm, .pgm, .ppm .pxm, .pnm, .pfm, .sr, .ras, .tiff, .tif, .exr, .hdr, .pic).
"""

image_names = s64_funcs.ims2list()
print('The following images have been loaded:')
for image_name in image_names:
  print(image_name)

"""# YOLO-Method Object Detection

The code can be put into a loop to do this for all images in a directory, or done individually.

**Run the cell below** to name the folder that will store the output files - if you do not wish to have a subfolder, run the cell but leave the form on the right blank. Saving in a subfolder is recommended if you are processing multiple images.
"""

subfolder = 'YOLO_Output_Data' #@param {type:"string"}
if subfolder == '':
  print('Files will be saved to the working directory')
else:
  print('Your sub-folder will be called: ' + subfolder)

"""Select whether or not you wish to process a specific image, or all of the images in the directory."""

option = 'Single Image' #@param ["All Images", "Single Image"]
print('You chose the option to process: '+option)

"""Run the code below to run YOLO.
Note that the input parameters are:


```
YOLO(image_path, subfold = '', conf = 0.5, threshold = 0.3):
```
Whereby `image_path` is the name of the file or the path to the file, `subfold` is the name of the sub-folder/directory to save the file to, and `conf` is the confidence threshold, and `threshold` is the non-maxima suppression threshold.
Note `conf` and `threshold` are set to `0.5` and `0.3` by default respectively, and not passing in a `subfold` string will put the output files in the same directory as the notebook file/current directory.

Note that all outputs will also be **saved** to the designated directory **and also** be displayed in the cell output.

Only fill out the image_name to specify which image to process if you chose the option to only process one image.
"""

if option == 'Single Image':
	image_name = '' #@param {type:"string"}
	if subfolder == '':
			s64_funcs.YOLO(image_name)
	else:
			s64_funcs.YOLO(image_name, subfolder)
else:
	for image in image_names:
		if subfolder == '':
			s64_funcs.YOLO(image)
		else:
			s64_funcs.YOLO(image, subfolder)

import os
os.path.isfile('/mlobjectdetectionprogramme')
os.path.isdir('/sample_data')

"""# Save Output

Run the cell below to download the files.
If you chose to put the output files in a subfolder, then the subfolder will be saved as .zip file.
If files were saved directly to the working directory, then they will be downloaded as individual files.
"""

# Download output files
if subfolder == '':
  output_fls = glob('Processed_*')
  output_fls.extend(glob('*_Output_data.txt'))
  for output_fl in output_fls:
    files.download('/mlobjectionprogramme/'+output_fl)
else:
  shutil.make_archive(subfolder+'_dl', 'zip', '/content/'+subfolder)
  files.download('mlobjectdetectionprogramme'+subfolder+'_dl.zip')
print('Download starting...')